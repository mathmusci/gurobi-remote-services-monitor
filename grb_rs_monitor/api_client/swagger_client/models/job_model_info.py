# coding: utf-8

"""
    Gurobi Remote Services API

    The Gurobi Remote Services is used to control a compute  node  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from grb_rs_monitor.api_client.swagger_client.configuration import Configuration


class JobModelInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rows': 'float',
        'cols': 'float',
        'nonz': 'float',
        'ts': 'float'
    }

    attribute_map = {
        'rows': 'rows',
        'cols': 'cols',
        'nonz': 'nonz',
        'ts': 'ts'
    }

    def __init__(self, rows=None, cols=None, nonz=None, ts=None, _configuration=None):  # noqa: E501
        """JobModelInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._rows = None
        self._cols = None
        self._nonz = None
        self._ts = None
        self.discriminator = None

        if rows is not None:
            self.rows = rows
        if cols is not None:
            self.cols = cols
        if nonz is not None:
            self.nonz = nonz
        if ts is not None:
            self.ts = ts

    @property
    def rows(self):
        """Gets the rows of this JobModelInfo.  # noqa: E501

        Number of rows  # noqa: E501

        :return: The rows of this JobModelInfo.  # noqa: E501
        :rtype: float
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this JobModelInfo.

        Number of rows  # noqa: E501

        :param rows: The rows of this JobModelInfo.  # noqa: E501
        :type: float
        """

        self._rows = rows

    @property
    def cols(self):
        """Gets the cols of this JobModelInfo.  # noqa: E501

        Number of columns  # noqa: E501

        :return: The cols of this JobModelInfo.  # noqa: E501
        :rtype: float
        """
        return self._cols

    @cols.setter
    def cols(self, cols):
        """Sets the cols of this JobModelInfo.

        Number of columns  # noqa: E501

        :param cols: The cols of this JobModelInfo.  # noqa: E501
        :type: float
        """

        self._cols = cols

    @property
    def nonz(self):
        """Gets the nonz of this JobModelInfo.  # noqa: E501

        Number of non-zero  # noqa: E501

        :return: The nonz of this JobModelInfo.  # noqa: E501
        :rtype: float
        """
        return self._nonz

    @nonz.setter
    def nonz(self, nonz):
        """Sets the nonz of this JobModelInfo.

        Number of non-zero  # noqa: E501

        :param nonz: The nonz of this JobModelInfo.  # noqa: E501
        :type: float
        """

        self._nonz = nonz

    @property
    def ts(self):
        """Gets the ts of this JobModelInfo.  # noqa: E501

        Timestamp of model creation  # noqa: E501

        :return: The ts of this JobModelInfo.  # noqa: E501
        :rtype: float
        """
        return self._ts

    @ts.setter
    def ts(self, ts):
        """Sets the ts of this JobModelInfo.

        Timestamp of model creation  # noqa: E501

        :param ts: The ts of this JobModelInfo.  # noqa: E501
        :type: float
        """

        self._ts = ts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobModelInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobModelInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobModelInfo):
            return True

        return self.to_dict() != other.to_dict()
