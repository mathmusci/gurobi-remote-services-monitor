# coding: utf-8

"""
    Gurobi Remote Services API

    The Gurobi Remote Services is used to control a compute  node  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from grb_rs_monitor.api_client.swagger_client.api_client import ApiClient


class NodeApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def config_get(self, x_gurobi_cspassword, **kwargs):  # noqa: E501
        """Gets current configuration  # noqa: E501

        Returns exported configuration properties. This endpoint will not return all the configuration properties, but only a subset in order to monitor the configuration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_get(x_gurobi_cspassword, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_gurobi_cspassword: Password (required)
        :return: Config
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.config_get_with_http_info(x_gurobi_cspassword, **kwargs)  # noqa: E501
        else:
            (data) = self.config_get_with_http_info(x_gurobi_cspassword, **kwargs)  # noqa: E501
            return data

    def config_get_with_http_info(self, x_gurobi_cspassword, **kwargs):  # noqa: E501
        """Gets current configuration  # noqa: E501

        Returns exported configuration properties. This endpoint will not return all the configuration properties, but only a subset in order to monitor the configuration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_get_with_http_info(x_gurobi_cspassword, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_gurobi_cspassword: Password (required)
        :return: Config
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_gurobi_cspassword']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method config_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_gurobi_cspassword' is set
        if self.api_client.client_side_validation and ('x_gurobi_cspassword' not in params or
                                                       params['x_gurobi_cspassword'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_gurobi_cspassword` when calling `config_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_gurobi_cspassword' in params:
            header_params['X-GUROBI-CSPASSWORD'] = params['x_gurobi_cspassword']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Config',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def config_post(self, x_gurobi_cspassword, config, **kwargs):  # noqa: E501
        """ADMIN - Updates the configuration  # noqa: E501

        Updates dynamic configuration properties, such as the job limit  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_post(x_gurobi_cspassword, config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_gurobi_cspassword: Admin password (required)
        :param ConfigUpdate config: Configuration update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.config_post_with_http_info(x_gurobi_cspassword, config, **kwargs)  # noqa: E501
        else:
            (data) = self.config_post_with_http_info(x_gurobi_cspassword, config, **kwargs)  # noqa: E501
            return data

    def config_post_with_http_info(self, x_gurobi_cspassword, config, **kwargs):  # noqa: E501
        """ADMIN - Updates the configuration  # noqa: E501

        Updates dynamic configuration properties, such as the job limit  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_post_with_http_info(x_gurobi_cspassword, config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_gurobi_cspassword: Admin password (required)
        :param ConfigUpdate config: Configuration update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_gurobi_cspassword', 'config']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method config_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_gurobi_cspassword' is set
        if self.api_client.client_side_validation and ('x_gurobi_cspassword' not in params or
                                                       params['x_gurobi_cspassword'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_gurobi_cspassword` when calling `config_post`")  # noqa: E501
        # verify the required parameter 'config' is set
        if self.api_client.client_side_validation and ('config' not in params or
                                                       params['config'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `config` when calling `config_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_gurobi_cspassword' in params:
            header_params['X-GUROBI-CSPASSWORD'] = params['x_gurobi_cspassword']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'config' in params:
            body_params = params['config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_id_log_get(self, x_gurobi_cspassword, id, **kwargs):  # noqa: E501
        """Returns the log of an active job  # noqa: E501

        Returns the engine log of the specified running or completed job. This endpoint is valid only with the node where the job is being processed. Several query parameters can be used to get the log from the job start, last lines or from a given index. The response header X-GUROBI-INDEX returns the last known index to be passed in the next call, so that new lines can be retrieved incrementally.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_id_log_get(x_gurobi_cspassword, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_gurobi_cspassword: Password (required)
        :param str id: ID of the job (required)
        :param bool b: from the beginning
        :param int p: from a specific index
        :param int n: last n lines only
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_id_log_get_with_http_info(x_gurobi_cspassword, id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_id_log_get_with_http_info(x_gurobi_cspassword, id, **kwargs)  # noqa: E501
            return data

    def jobs_id_log_get_with_http_info(self, x_gurobi_cspassword, id, **kwargs):  # noqa: E501
        """Returns the log of an active job  # noqa: E501

        Returns the engine log of the specified running or completed job. This endpoint is valid only with the node where the job is being processed. Several query parameters can be used to get the log from the job start, last lines or from a given index. The response header X-GUROBI-INDEX returns the last known index to be passed in the next call, so that new lines can be retrieved incrementally.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_id_log_get_with_http_info(x_gurobi_cspassword, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_gurobi_cspassword: Password (required)
        :param str id: ID of the job (required)
        :param bool b: from the beginning
        :param int p: from a specific index
        :param int n: last n lines only
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_gurobi_cspassword', 'id', 'b', 'p', 'n']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_id_log_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_gurobi_cspassword' is set
        if self.api_client.client_side_validation and ('x_gurobi_cspassword' not in params or
                                                       params['x_gurobi_cspassword'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_gurobi_cspassword` when calling `jobs_id_log_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `jobs_id_log_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'b' in params:
            query_params.append(('b', params['b']))  # noqa: E501
        if 'p' in params:
            query_params.append(('p', params['p']))  # noqa: E501
        if 'n' in params:
            query_params.append(('n', params['n']))  # noqa: E501

        header_params = {}
        if 'x_gurobi_cspassword' in params:
            header_params['X-GUROBI-CSPASSWORD'] = params['x_gurobi_cspassword']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/jobs/{id}/log', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_id_metrics_get(self, x_gurobi_cspassword, id, **kwargs):  # noqa: E501
        """Returns the metrics of an active job  # noqa: E501

        Returns the metrics of the specified running or completed job. This endpoint is valid only with the node where the job is being processed. The returned data is formatted as a text file with one json object per line. Each object gives the timestamp since the start of the optimizatuon and one or more attibutes for the metrics such as objective value and bound. Several query parameters can be used to get the metrics from the job start, last lines or from a given index. The response header X-GUROBI-INDEX returns the last known index to be passed in the next call, so that new lines can be retrieved incrementally.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_id_metrics_get(x_gurobi_cspassword, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_gurobi_cspassword: Password (required)
        :param str id: ID of the job (required)
        :param int m: model index
        :param bool b: from the beginning
        :param int p: from a specific index
        :param int n: last n lines only
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_id_metrics_get_with_http_info(x_gurobi_cspassword, id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_id_metrics_get_with_http_info(x_gurobi_cspassword, id, **kwargs)  # noqa: E501
            return data

    def jobs_id_metrics_get_with_http_info(self, x_gurobi_cspassword, id, **kwargs):  # noqa: E501
        """Returns the metrics of an active job  # noqa: E501

        Returns the metrics of the specified running or completed job. This endpoint is valid only with the node where the job is being processed. The returned data is formatted as a text file with one json object per line. Each object gives the timestamp since the start of the optimizatuon and one or more attibutes for the metrics such as objective value and bound. Several query parameters can be used to get the metrics from the job start, last lines or from a given index. The response header X-GUROBI-INDEX returns the last known index to be passed in the next call, so that new lines can be retrieved incrementally.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_id_metrics_get_with_http_info(x_gurobi_cspassword, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_gurobi_cspassword: Password (required)
        :param str id: ID of the job (required)
        :param int m: model index
        :param bool b: from the beginning
        :param int p: from a specific index
        :param int n: last n lines only
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_gurobi_cspassword', 'id', 'm', 'b', 'p', 'n']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_id_metrics_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_gurobi_cspassword' is set
        if self.api_client.client_side_validation and ('x_gurobi_cspassword' not in params or
                                                       params['x_gurobi_cspassword'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_gurobi_cspassword` when calling `jobs_id_metrics_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `jobs_id_metrics_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'm' in params:
            query_params.append(('m', params['m']))  # noqa: E501
        if 'b' in params:
            query_params.append(('b', params['b']))  # noqa: E501
        if 'p' in params:
            query_params.append(('p', params['p']))  # noqa: E501
        if 'n' in params:
            query_params.append(('n', params['n']))  # noqa: E501

        header_params = {}
        if 'x_gurobi_cspassword' in params:
            header_params['X-GUROBI-CSPASSWORD'] = params['x_gurobi_cspassword']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/jobs/{id}/metrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_id_parameters_get(self, x_gurobi_cspassword, id, **kwargs):  # noqa: E501
        """Returns the parameters of an active job  # noqa: E501

        Returns the parameters from a running or completed job. This endpoint is valid only with the node where the job is being processed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_id_parameters_get(x_gurobi_cspassword, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_gurobi_cspassword: Password (required)
        :param str id: ID of the job (required)
        :return: list[JobParameter]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_id_parameters_get_with_http_info(x_gurobi_cspassword, id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_id_parameters_get_with_http_info(x_gurobi_cspassword, id, **kwargs)  # noqa: E501
            return data

    def jobs_id_parameters_get_with_http_info(self, x_gurobi_cspassword, id, **kwargs):  # noqa: E501
        """Returns the parameters of an active job  # noqa: E501

        Returns the parameters from a running or completed job. This endpoint is valid only with the node where the job is being processed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_id_parameters_get_with_http_info(x_gurobi_cspassword, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_gurobi_cspassword: Password (required)
        :param str id: ID of the job (required)
        :return: list[JobParameter]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_gurobi_cspassword', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_id_parameters_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_gurobi_cspassword' is set
        if self.api_client.client_side_validation and ('x_gurobi_cspassword' not in params or
                                                       params['x_gurobi_cspassword'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_gurobi_cspassword` when calling `jobs_id_parameters_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `jobs_id_parameters_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_gurobi_cspassword' in params:
            header_params['X-GUROBI-CSPASSWORD'] = params['x_gurobi_cspassword']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/jobs/{id}/parameters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[JobParameter]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ping_get(self, **kwargs):  # noqa: E501
        """Pings a node  # noqa: E501

        This endpoint is provided to test if a given node is reachable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ping_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ping_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ping_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def ping_get_with_http_info(self, **kwargs):  # noqa: E501
        """Pings a node  # noqa: E501

        This endpoint is provided to test if a given node is reachable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ping_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ping_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ping', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
