# coding: utf-8

"""
    Gurobi Remote Services API

    The Gurobi Remote Services is used to control a compute  node  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from grb_rs_monitor.api_client.swagger_client.configuration import Configuration


class JobMipInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'objbst': 'float',
        'objbnd': 'float',
        'nodcnt': 'float',
        'nodlft': 'float',
        'solcnt': 'float',
        'cutcnt': 'float'
    }

    attribute_map = {
        'objbst': 'objbst',
        'objbnd': 'objbnd',
        'nodcnt': 'nodcnt',
        'nodlft': 'nodlft',
        'solcnt': 'solcnt',
        'cutcnt': 'cutcnt'
    }

    def __init__(self, objbst=None, objbnd=None, nodcnt=None, nodlft=None, solcnt=None, cutcnt=None, _configuration=None):  # noqa: E501
        """JobMipInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._objbst = None
        self._objbnd = None
        self._nodcnt = None
        self._nodlft = None
        self._solcnt = None
        self._cutcnt = None
        self.discriminator = None

        if objbst is not None:
            self.objbst = objbst
        if objbnd is not None:
            self.objbnd = objbnd
        if nodcnt is not None:
            self.nodcnt = nodcnt
        if nodlft is not None:
            self.nodlft = nodlft
        if solcnt is not None:
            self.solcnt = solcnt
        if cutcnt is not None:
            self.cutcnt = cutcnt

    @property
    def objbst(self):
        """Gets the objbst of this JobMipInfo.  # noqa: E501

        Current best objective  # noqa: E501

        :return: The objbst of this JobMipInfo.  # noqa: E501
        :rtype: float
        """
        return self._objbst

    @objbst.setter
    def objbst(self, objbst):
        """Sets the objbst of this JobMipInfo.

        Current best objective  # noqa: E501

        :param objbst: The objbst of this JobMipInfo.  # noqa: E501
        :type: float
        """

        self._objbst = objbst

    @property
    def objbnd(self):
        """Gets the objbnd of this JobMipInfo.  # noqa: E501

        Current best objective bound  # noqa: E501

        :return: The objbnd of this JobMipInfo.  # noqa: E501
        :rtype: float
        """
        return self._objbnd

    @objbnd.setter
    def objbnd(self, objbnd):
        """Sets the objbnd of this JobMipInfo.

        Current best objective bound  # noqa: E501

        :param objbnd: The objbnd of this JobMipInfo.  # noqa: E501
        :type: float
        """

        self._objbnd = objbnd

    @property
    def nodcnt(self):
        """Gets the nodcnt of this JobMipInfo.  # noqa: E501

        Current explored node count  # noqa: E501

        :return: The nodcnt of this JobMipInfo.  # noqa: E501
        :rtype: float
        """
        return self._nodcnt

    @nodcnt.setter
    def nodcnt(self, nodcnt):
        """Sets the nodcnt of this JobMipInfo.

        Current explored node count  # noqa: E501

        :param nodcnt: The nodcnt of this JobMipInfo.  # noqa: E501
        :type: float
        """

        self._nodcnt = nodcnt

    @property
    def nodlft(self):
        """Gets the nodlft of this JobMipInfo.  # noqa: E501

        Current unexplored node count  # noqa: E501

        :return: The nodlft of this JobMipInfo.  # noqa: E501
        :rtype: float
        """
        return self._nodlft

    @nodlft.setter
    def nodlft(self, nodlft):
        """Sets the nodlft of this JobMipInfo.

        Current unexplored node count  # noqa: E501

        :param nodlft: The nodlft of this JobMipInfo.  # noqa: E501
        :type: float
        """

        self._nodlft = nodlft

    @property
    def solcnt(self):
        """Gets the solcnt of this JobMipInfo.  # noqa: E501

        Current count of feasible solutions found  # noqa: E501

        :return: The solcnt of this JobMipInfo.  # noqa: E501
        :rtype: float
        """
        return self._solcnt

    @solcnt.setter
    def solcnt(self, solcnt):
        """Sets the solcnt of this JobMipInfo.

        Current count of feasible solutions found  # noqa: E501

        :param solcnt: The solcnt of this JobMipInfo.  # noqa: E501
        :type: float
        """

        self._solcnt = solcnt

    @property
    def cutcnt(self):
        """Gets the cutcnt of this JobMipInfo.  # noqa: E501

        Current count of cutting planes applied  # noqa: E501

        :return: The cutcnt of this JobMipInfo.  # noqa: E501
        :rtype: float
        """
        return self._cutcnt

    @cutcnt.setter
    def cutcnt(self, cutcnt):
        """Sets the cutcnt of this JobMipInfo.

        Current count of cutting planes applied  # noqa: E501

        :param cutcnt: The cutcnt of this JobMipInfo.  # noqa: E501
        :type: float
        """

        self._cutcnt = cutcnt

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobMipInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobMipInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobMipInfo):
            return True

        return self.to_dict() != other.to_dict()
