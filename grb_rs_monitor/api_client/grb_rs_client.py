from urllib.parse import urljoin  # noqa: F401,E501
import requests  # noqa: F401,E501
import time  # noqa: F401,E501
import json

from grb_rs_monitor.api_client.base import GurobiComputeServerClientBase
from grb_rs_monitor.api_client.swagger_client import ConfigUpdate
from grb_rs_monitor.api_client.swagger_client import ApiClient, ClusterApi, NodeApi
from grb_rs_monitor.api_client.swagger_client import Configuration as APIClientConfig
from grb_rs_monitor.components.logging import logger

# requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)

class SwaggerAPIClientBuilder():
    def _make_client(self, client_class, api_client_base, base_url, configuration=None):
        """Creates a Swagger client using the Swagger autogenerated configuration and provided classes.
        """

        if configuration is None:
            config = APIClientConfig()
        else:
            config = configuration()

        config.host = base_url
        # config.api_key = {api_key_name: api_key}
        api_client = api_client_base(configuration=config)

        return client_class(api_client=api_client)


class GurobiComputeServerClient(GurobiComputeServerClientBase, SwaggerAPIClientBuilder):
    def __init__(self, grb_rs_url: str, grb_rs_client_password: str, grb_rs_admin_password: str=None) -> None:
        """Instantiate a client object.
        Args:
            grb_rs_url: URL at which Gurobi Remote Services Agent/API is available.
            grb_rs_client_password: user password
            grb_rs_admin_password: admin password (optional)
        Returns:
            None
        """        
        self.grb_rs_url = grb_rs_url
        self.grb_rs_client_password = grb_rs_client_password
        self.grb_rs_admin_password = grb_rs_admin_password
        self.grb_rs_api_client = {"ClusterApi": self._make_client(client_class=ClusterApi,
                                                                  api_client_base=ApiClient,
                                                                  base_url=self.grb_rs_url),
                                  "NodeApi": self._make_client(client_class=NodeApi,
                                                               api_client_base=ApiClient,
                                                               base_url=self.grb_rs_url)
                                  }
        logger.info(f"GurobiComputeServerClient instantiated now")

    def __enter__(self):
        logger.info(f"Instantiating a {self.__name__} object.")
        return self

    def __exit__(self, type, value, traceback):
        logger.info(f"{self.__name__} context manager termination")
        logger.info(f"{self.__name__} exit type: {type}")
        logger.info(f"{self.__name__} exit value: {value}")
        logger.info(f"{self.__name__} exit traceback: {traceback}")

    @property
    def joblimit(self):
        """Query Gurobi Compute Server, fetch and return its current JOBLIMIT value.
        """
        return self.grb_rs_api_client['NodeApi'].config_get(
            x_gurobi_cspassword=self.grb_rs_client_password
        ).job_limit

    def _joblimit_setter(self, job_limit):
        """Set Gurobi Compute Server's JOBLIMIT to a predefined value.
        """
        self.grb_rs_api_client['NodeApi'].config_post(
            config=ConfigUpdate(job_limit=job_limit), 
            x_gurobi_cspassword=self.grb_rs_admin_password
        )

    @property
    def is_online(self):
        """Poll Gurobi Compute Server to check whether it is online or not.
        Return True if CS is online and False otherwise.
        """
        try:
            _, response_code, _ = self.grb_rs_api_client['NodeApi'].ping_get_with_http_info()

            if response_code == 204:
                return True
            else:
                return False                
        except BaseException:
            return False

    @property
    def is_idle(self, queued=True):
        """Check whether Gurobi Compute Server is idle (return True) or not (return False).
        We consider the server to be idle when there are no active or pending jobs.
        """
        # TODO: the following method should work and it doesn't
        # by some reason it is accompanied by the following line that goes into Gurobi Remote Services' log:
        # info  : http: TLS handshake error from 10.106.11.186:48762: EOF
        # this needs debugging
        # jobs = self.grb_rs_api_client['ClusterApi'].cluster_jobs_get(
        #                                                       x_gurobi_cspassword=self.grb_rs_client_password,
        #                                                       queued=str(queued).lower(),
        #                                                       running="true",
        #                                                       aggregate="false",
        #                                                       recent="false")

        # get_cluster_jobs_endpoint_url = urljoin(self.grb_rs_url, 'cluster/jobs')
        # headers = {"Accept": "application/json", "X-GUROBI-CSPASSWORD": self.grb_rs_client_password}
        # params = {'running': 'true', 'queued': str(queued).lower(), 'aggregate': 'false', 'recent': 'false'}
        # jobs = requests.get(get_cluster_jobs_endpoint_url, headers=headers, params=params, verify=False).json()
        params = {
            "running": True, 
            "queued": queued, 
            "aggregate": False, 
            "recent": False
        }
        jobs = self.get_jobs(**params)
        hosts = ", ".join([job["properties"]["hostname"] for job in jobs])
        if not jobs:
            return True
        else:
            logger.info(f"hosts: {hosts}")
            return False

    def get_jobs(self, running=True, queued=True, aggregate=False, recent=True):
        """Get Compute Server jobs in a customisable way by specifying the job category/categories of interest.
        """
        get_cluster_jobs_endpoint_url = urljoin(self.grb_rs_url, "cluster/jobs")
        headers = {"Accept": "application/json", "X-GUROBI-CSPASSWORD": self.grb_rs_client_password}
        params = {
            "running": str(running).lower(),
            "queued": str(queued).lower(),
            "aggregate": str(aggregate).lower(),
            "recent": str(recent).lower()
        }
        jobs = requests.get(get_cluster_jobs_endpoint_url, headers=headers, params=params, verify=False).json()
        
        return jobs

    def get_nodes(self):
        """Get cluster and nodes information.
        """
        return self.grb_rs_api_client["ClusterApi"].cluster_nodes_get(
            x_gurobi_cspassword=self.grb_rs_client_password
        )

    @property
    def number_of_running_jobs(self):
        """Get the number of running jobs.
        """
        return len(
            self.get_jobs(running=True, 
                          queued=False, 
                          aggregate=False, 
                          recent=False)
        )

class GurobiComputeServerClientMock(GurobiComputeServerClientBase):
    def __init__(self, grb_rs_url: str, grb_rs_client_password: str, grb_rs_admin_password: str=None) -> None:
        logger.info(f"GurobiComputeServerClientMock instantiated now")

    def __enter__(self):
        logger.info(f"Instantiating a {self.__name__} object.")
        return self

    def __exit__(self, type, value, traceback):
        logger.info(f"{self.__name__} context manager termination")
        logger.info(f"{self.__name__} exit type: {type}")
        logger.info(f"{self.__name__} exit value: {value}")
        logger.info(f"{self.__name__} exit traceback: {traceback}")

    @property
    def joblimit(self):
        return self._joblimit

    def _joblimit_setter(self, job_limit):
        self._joblimit = job_limit

    @property
    def is_online(self):
        return True

    @property
    def is_idle(self, queued=True):
        return False

    def get_jobs(self, running=True, queued=True, aggregate=False, recent=True):
        with open("mocks/jobs.json") as outfile: 
            jobs = json.load(outfile)
        return jobs

    def get_nodes(self):
        with open("mocks/nodes.json") as outfile: 
            nodes = json.load(outfile)
        return nodes

    @property
    def number_of_running_jobs(self):
        """Get the number of running jobs.
        """
        return 1
