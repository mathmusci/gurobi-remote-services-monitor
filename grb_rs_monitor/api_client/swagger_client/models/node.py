# coding: utf-8

"""
    Gurobi Remote Services API

    The Gurobi Remote Services is used to control a compute  node  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from grb_rs_monitor.api_client.swagger_client.configuration import Configuration


class Node(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'address': 'str',
        'type': 'NodeType',
        'license': 'LicenseStatus',
        'status': 'NodeStatus',
        'processing': 'ProcessingState',
        'started_at': 'int',
        'runtimes': 'list[str]',
        'version': 'str',
        'job_limit': 'int',
        'group': 'str',
        'metrics': 'NodeMetrics'
    }

    attribute_map = {
        'id': 'id',
        'address': 'address',
        'type': 'type',
        'license': 'license',
        'status': 'status',
        'processing': 'processing',
        'started_at': 'startedAt',
        'runtimes': 'runtimes',
        'version': 'version',
        'job_limit': 'jobLimit',
        'group': 'group',
        'metrics': 'metrics'
    }

    def __init__(self, id=None, address=None, type=None, license=None, status=None, processing=None, started_at=None, runtimes=None, version=None, job_limit=None, group=None, metrics=None, _configuration=None):  # noqa: E501
        """Node - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._address = None
        self._type = None
        self._license = None
        self._status = None
        self._processing = None
        self._started_at = None
        self._runtimes = None
        self._version = None
        self._job_limit = None
        self._group = None
        self._metrics = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if address is not None:
            self.address = address
        if type is not None:
            self.type = type
        if license is not None:
            self.license = license
        if status is not None:
            self.status = status
        if processing is not None:
            self.processing = processing
        if started_at is not None:
            self.started_at = started_at
        if runtimes is not None:
            self.runtimes = runtimes
        if version is not None:
            self.version = version
        if job_limit is not None:
            self.job_limit = job_limit
        if group is not None:
            self.group = group
        if metrics is not None:
            self.metrics = metrics

    @property
    def id(self):
        """Gets the id of this Node.  # noqa: E501

        Node ID  # noqa: E501

        :return: The id of this Node.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Node.

        Node ID  # noqa: E501

        :param id: The id of this Node.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def address(self):
        """Gets the address of this Node.  # noqa: E501

        Node address  # noqa: E501

        :return: The address of this Node.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Node.

        Node address  # noqa: E501

        :param address: The address of this Node.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def type(self):
        """Gets the type of this Node.  # noqa: E501


        :return: The type of this Node.  # noqa: E501
        :rtype: NodeType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Node.


        :param type: The type of this Node.  # noqa: E501
        :type: NodeType
        """

        self._type = type

    @property
    def license(self):
        """Gets the license of this Node.  # noqa: E501


        :return: The license of this Node.  # noqa: E501
        :rtype: LicenseStatus
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this Node.


        :param license: The license of this Node.  # noqa: E501
        :type: LicenseStatus
        """

        self._license = license

    @property
    def status(self):
        """Gets the status of this Node.  # noqa: E501


        :return: The status of this Node.  # noqa: E501
        :rtype: NodeStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Node.


        :param status: The status of this Node.  # noqa: E501
        :type: NodeStatus
        """

        self._status = status

    @property
    def processing(self):
        """Gets the processing of this Node.  # noqa: E501


        :return: The processing of this Node.  # noqa: E501
        :rtype: ProcessingState
        """
        return self._processing

    @processing.setter
    def processing(self, processing):
        """Sets the processing of this Node.


        :param processing: The processing of this Node.  # noqa: E501
        :type: ProcessingState
        """

        self._processing = processing

    @property
    def started_at(self):
        """Gets the started_at of this Node.  # noqa: E501

        Start time timestamp  # noqa: E501

        :return: The started_at of this Node.  # noqa: E501
        :rtype: int
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this Node.

        Start time timestamp  # noqa: E501

        :param started_at: The started_at of this Node.  # noqa: E501
        :type: int
        """

        self._started_at = started_at

    @property
    def runtimes(self):
        """Gets the runtimes of this Node.  # noqa: E501

        Deployed runtime versions  # noqa: E501

        :return: The runtimes of this Node.  # noqa: E501
        :rtype: list[str]
        """
        return self._runtimes

    @runtimes.setter
    def runtimes(self, runtimes):
        """Sets the runtimes of this Node.

        Deployed runtime versions  # noqa: E501

        :param runtimes: The runtimes of this Node.  # noqa: E501
        :type: list[str]
        """

        self._runtimes = runtimes

    @property
    def version(self):
        """Gets the version of this Node.  # noqa: E501

        Remote Services Agent version  # noqa: E501

        :return: The version of this Node.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Node.

        Remote Services Agent version  # noqa: E501

        :param version: The version of this Node.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def job_limit(self):
        """Gets the job_limit of this Node.  # noqa: E501

        Job Limit (maximum number of running jobs)  # noqa: E501

        :return: The job_limit of this Node.  # noqa: E501
        :rtype: int
        """
        return self._job_limit

    @job_limit.setter
    def job_limit(self, job_limit):
        """Sets the job_limit of this Node.

        Job Limit (maximum number of running jobs)  # noqa: E501

        :param job_limit: The job_limit of this Node.  # noqa: E501
        :type: int
        """

        self._job_limit = job_limit

    @property
    def group(self):
        """Gets the group of this Node.  # noqa: E501

        Group name for job affinity  # noqa: E501

        :return: The group of this Node.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Node.

        Group name for job affinity  # noqa: E501

        :param group: The group of this Node.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def metrics(self):
        """Gets the metrics of this Node.  # noqa: E501


        :return: The metrics of this Node.  # noqa: E501
        :rtype: NodeMetrics
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this Node.


        :param metrics: The metrics of this Node.  # noqa: E501
        :type: NodeMetrics
        """

        self._metrics = metrics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Node, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Node):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Node):
            return True

        return self.to_dict() != other.to_dict()
