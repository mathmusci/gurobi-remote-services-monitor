# coding: utf-8

"""
    Gurobi Remote Services API

    The Gurobi Remote Services is used to control a compute  node  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from grb_rs_monitor.api_client.swagger_client.configuration import Configuration


class JobSimplexInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'objval': 'float',
        'priminf': 'float',
        'dualinf': 'float',
        'ispert': 'float'
    }

    attribute_map = {
        'objval': 'objval',
        'priminf': 'priminf',
        'dualinf': 'dualinf',
        'ispert': 'ispert'
    }

    def __init__(self, objval=None, priminf=None, dualinf=None, ispert=None, _configuration=None):  # noqa: E501
        """JobSimplexInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._objval = None
        self._priminf = None
        self._dualinf = None
        self._ispert = None
        self.discriminator = None

        if objval is not None:
            self.objval = objval
        if priminf is not None:
            self.priminf = priminf
        if dualinf is not None:
            self.dualinf = dualinf
        if ispert is not None:
            self.ispert = ispert

    @property
    def objval(self):
        """Gets the objval of this JobSimplexInfo.  # noqa: E501

        Current simplex objective value  # noqa: E501

        :return: The objval of this JobSimplexInfo.  # noqa: E501
        :rtype: float
        """
        return self._objval

    @objval.setter
    def objval(self, objval):
        """Sets the objval of this JobSimplexInfo.

        Current simplex objective value  # noqa: E501

        :param objval: The objval of this JobSimplexInfo.  # noqa: E501
        :type: float
        """

        self._objval = objval

    @property
    def priminf(self):
        """Gets the priminf of this JobSimplexInfo.  # noqa: E501

        Current primal infeasibility  # noqa: E501

        :return: The priminf of this JobSimplexInfo.  # noqa: E501
        :rtype: float
        """
        return self._priminf

    @priminf.setter
    def priminf(self, priminf):
        """Sets the priminf of this JobSimplexInfo.

        Current primal infeasibility  # noqa: E501

        :param priminf: The priminf of this JobSimplexInfo.  # noqa: E501
        :type: float
        """

        self._priminf = priminf

    @property
    def dualinf(self):
        """Gets the dualinf of this JobSimplexInfo.  # noqa: E501

        Current dual infeasibility  # noqa: E501

        :return: The dualinf of this JobSimplexInfo.  # noqa: E501
        :rtype: float
        """
        return self._dualinf

    @dualinf.setter
    def dualinf(self, dualinf):
        """Sets the dualinf of this JobSimplexInfo.

        Current dual infeasibility  # noqa: E501

        :param dualinf: The dualinf of this JobSimplexInfo.  # noqa: E501
        :type: float
        """

        self._dualinf = dualinf

    @property
    def ispert(self):
        """Gets the ispert of this JobSimplexInfo.  # noqa: E501

        Is problem perturbed?  # noqa: E501

        :return: The ispert of this JobSimplexInfo.  # noqa: E501
        :rtype: float
        """
        return self._ispert

    @ispert.setter
    def ispert(self, ispert):
        """Sets the ispert of this JobSimplexInfo.

        Is problem perturbed?  # noqa: E501

        :param ispert: The ispert of this JobSimplexInfo.  # noqa: E501
        :type: float
        """

        self._ispert = ispert

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobSimplexInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobSimplexInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobSimplexInfo):
            return True

        return self.to_dict() != other.to_dict()
