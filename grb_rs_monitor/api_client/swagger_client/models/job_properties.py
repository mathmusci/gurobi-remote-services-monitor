# coding: utf-8

"""
    Gurobi Remote Services API

    The Gurobi Remote Services is used to control a compute  node  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from grb_rs_monitor.api_client.swagger_client.configuration import Configuration


class JobProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'priority': 'float',
        'pid': 'float',
        'hostname': 'str',
        'username': 'str',
        'ip': 'str',
        'parent_id': 'str',
        'app_name': 'str',
        'runtime': 'str',
        'strict': 'bool',
        'keep_alive_timeout': 'int',
        'idle_timeout': 'int',
        'group': 'str',
        'apitype': 'str'
    }

    attribute_map = {
        'priority': 'priority',
        'pid': 'pid',
        'hostname': 'hostname',
        'username': 'username',
        'ip': 'ip',
        'parent_id': 'parentId',
        'app_name': 'appName',
        'runtime': 'runtime',
        'strict': 'strict',
        'keep_alive_timeout': 'keepAliveTimeout',
        'idle_timeout': 'idleTimeout',
        'group': 'group',
        'apitype': 'apitype'
    }

    def __init__(self, priority=None, pid=None, hostname=None, username=None, ip=None, parent_id=None, app_name=None, runtime=None, strict=None, keep_alive_timeout=None, idle_timeout=None, group=None, apitype=None, _configuration=None):  # noqa: E501
        """JobProperties - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._priority = None
        self._pid = None
        self._hostname = None
        self._username = None
        self._ip = None
        self._parent_id = None
        self._app_name = None
        self._runtime = None
        self._strict = None
        self._keep_alive_timeout = None
        self._idle_timeout = None
        self._group = None
        self._apitype = None
        self.discriminator = None

        if priority is not None:
            self.priority = priority
        if pid is not None:
            self.pid = pid
        if hostname is not None:
            self.hostname = hostname
        if username is not None:
            self.username = username
        if ip is not None:
            self.ip = ip
        if parent_id is not None:
            self.parent_id = parent_id
        if app_name is not None:
            self.app_name = app_name
        if runtime is not None:
            self.runtime = runtime
        if strict is not None:
            self.strict = strict
        if keep_alive_timeout is not None:
            self.keep_alive_timeout = keep_alive_timeout
        if idle_timeout is not None:
            self.idle_timeout = idle_timeout
        if group is not None:
            self.group = group
        if apitype is not None:
            self.apitype = apitype

    @property
    def priority(self):
        """Gets the priority of this JobProperties.  # noqa: E501

        Priority of the job  # noqa: E501

        :return: The priority of this JobProperties.  # noqa: E501
        :rtype: float
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this JobProperties.

        Priority of the job  # noqa: E501

        :param priority: The priority of this JobProperties.  # noqa: E501
        :type: float
        """

        self._priority = priority

    @property
    def pid(self):
        """Gets the pid of this JobProperties.  # noqa: E501

        PID of the process that submitted the job  # noqa: E501

        :return: The pid of this JobProperties.  # noqa: E501
        :rtype: float
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this JobProperties.

        PID of the process that submitted the job  # noqa: E501

        :param pid: The pid of this JobProperties.  # noqa: E501
        :type: float
        """

        self._pid = pid

    @property
    def hostname(self):
        """Gets the hostname of this JobProperties.  # noqa: E501

        Hostname of the machine that submitted the job  # noqa: E501

        :return: The hostname of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this JobProperties.

        Hostname of the machine that submitted the job  # noqa: E501

        :param hostname: The hostname of this JobProperties.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def username(self):
        """Gets the username of this JobProperties.  # noqa: E501

        Username of the process that submitted the job  # noqa: E501

        :return: The username of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this JobProperties.

        Username of the process that submitted the job  # noqa: E501

        :param username: The username of this JobProperties.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def ip(self):
        """Gets the ip of this JobProperties.  # noqa: E501

        IP of the machine that submitted the job  # noqa: E501

        :return: The ip of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this JobProperties.

        IP of the machine that submitted the job  # noqa: E501

        :param ip: The ip of this JobProperties.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def parent_id(self):
        """Gets the parent_id of this JobProperties.  # noqa: E501

        Parent ID when the job is a worker job  # noqa: E501

        :return: The parent_id of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this JobProperties.

        Parent ID when the job is a worker job  # noqa: E501

        :param parent_id: The parent_id of this JobProperties.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def app_name(self):
        """Gets the app_name of this JobProperties.  # noqa: E501

        License application name  # noqa: E501

        :return: The app_name of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this JobProperties.

        License application name  # noqa: E501

        :param app_name: The app_name of this JobProperties.  # noqa: E501
        :type: str
        """

        self._app_name = app_name

    @property
    def runtime(self):
        """Gets the runtime of this JobProperties.  # noqa: E501

        Requested runtime to execute the job  # noqa: E501

        :return: The runtime of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._runtime

    @runtime.setter
    def runtime(self, runtime):
        """Sets the runtime of this JobProperties.

        Requested runtime to execute the job  # noqa: E501

        :param runtime: The runtime of this JobProperties.  # noqa: E501
        :type: str
        """

        self._runtime = runtime

    @property
    def strict(self):
        """Gets the strict of this JobProperties.  # noqa: E501

        Indicates if runtime version must match strictly the requested version  # noqa: E501

        :return: The strict of this JobProperties.  # noqa: E501
        :rtype: bool
        """
        return self._strict

    @strict.setter
    def strict(self, strict):
        """Sets the strict of this JobProperties.

        Indicates if runtime version must match strictly the requested version  # noqa: E501

        :param strict: The strict of this JobProperties.  # noqa: E501
        :type: bool
        """

        self._strict = strict

    @property
    def keep_alive_timeout(self):
        """Gets the keep_alive_timeout of this JobProperties.  # noqa: E501

        Indicates a custom value for the keep alive timeout (seconds)  # noqa: E501

        :return: The keep_alive_timeout of this JobProperties.  # noqa: E501
        :rtype: int
        """
        return self._keep_alive_timeout

    @keep_alive_timeout.setter
    def keep_alive_timeout(self, keep_alive_timeout):
        """Sets the keep_alive_timeout of this JobProperties.

        Indicates a custom value for the keep alive timeout (seconds)  # noqa: E501

        :param keep_alive_timeout: The keep_alive_timeout of this JobProperties.  # noqa: E501
        :type: int
        """

        self._keep_alive_timeout = keep_alive_timeout

    @property
    def idle_timeout(self):
        """Gets the idle_timeout of this JobProperties.  # noqa: E501

        Indicates a custom value for the idle timeout (seconds)  # noqa: E501

        :return: The idle_timeout of this JobProperties.  # noqa: E501
        :rtype: int
        """
        return self._idle_timeout

    @idle_timeout.setter
    def idle_timeout(self, idle_timeout):
        """Sets the idle_timeout of this JobProperties.

        Indicates a custom value for the idle timeout (seconds)  # noqa: E501

        :param idle_timeout: The idle_timeout of this JobProperties.  # noqa: E501
        :type: int
        """

        self._idle_timeout = idle_timeout

    @property
    def group(self):
        """Gets the group of this JobProperties.  # noqa: E501

        Group name for cluster server selection  # noqa: E501

        :return: The group of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this JobProperties.

        Group name for cluster server selection  # noqa: E501

        :param group: The group of this JobProperties.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def apitype(self):
        """Gets the apitype of this JobProperties.  # noqa: E501

        API type of the client submitting the job (C++, .Net, Python...)  # noqa: E501

        :return: The apitype of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._apitype

    @apitype.setter
    def apitype(self, apitype):
        """Sets the apitype of this JobProperties.

        API type of the client submitting the job (C++, .Net, Python...)  # noqa: E501

        :param apitype: The apitype of this JobProperties.  # noqa: E501
        :type: str
        """

        self._apitype = apitype

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobProperties):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobProperties):
            return True

        return self.to_dict() != other.to_dict()
