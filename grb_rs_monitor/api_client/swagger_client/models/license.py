# coding: utf-8

"""
    Gurobi Remote Services API

    The Gurobi Remote Services is used to control a compute  node  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from grb_rs_monitor.api_client.swagger_client.configuration import Configuration


class License(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'type_name': 'str',
        'status': 'LicenseStatus',
        'cloud_key': 'str',
        'started_at': 'int',
        'organization': 'str',
        'user_name': 'str',
        'max_version': 'int',
        'expiration': 'int',
        'expires_at': 'int',
        'cs_enabled': 'bool',
        'distributed_limit': 'int',
        'app_name': 'str',
        'error_msg': 'str',
        'error': 'int'
    }

    attribute_map = {
        'address': 'address',
        'type_name': 'typeName',
        'status': 'status',
        'cloud_key': 'cloudKey',
        'started_at': 'startedAt',
        'organization': 'organization',
        'user_name': 'userName',
        'max_version': 'maxVersion',
        'expiration': 'expiration',
        'expires_at': 'expiresAt',
        'cs_enabled': 'csEnabled',
        'distributed_limit': 'distributedLimit',
        'app_name': 'appName',
        'error_msg': 'errorMsg',
        'error': 'error'
    }

    def __init__(self, address=None, type_name=None, status=None, cloud_key=None, started_at=None, organization=None, user_name=None, max_version=None, expiration=None, expires_at=None, cs_enabled=None, distributed_limit=None, app_name=None, error_msg=None, error=None, _configuration=None):  # noqa: E501
        """License - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._address = None
        self._type_name = None
        self._status = None
        self._cloud_key = None
        self._started_at = None
        self._organization = None
        self._user_name = None
        self._max_version = None
        self._expiration = None
        self._expires_at = None
        self._cs_enabled = None
        self._distributed_limit = None
        self._app_name = None
        self._error_msg = None
        self._error = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if type_name is not None:
            self.type_name = type_name
        if status is not None:
            self.status = status
        if cloud_key is not None:
            self.cloud_key = cloud_key
        if started_at is not None:
            self.started_at = started_at
        if organization is not None:
            self.organization = organization
        if user_name is not None:
            self.user_name = user_name
        if max_version is not None:
            self.max_version = max_version
        if expiration is not None:
            self.expiration = expiration
        if expires_at is not None:
            self.expires_at = expires_at
        if cs_enabled is not None:
            self.cs_enabled = cs_enabled
        if distributed_limit is not None:
            self.distributed_limit = distributed_limit
        if app_name is not None:
            self.app_name = app_name
        if error_msg is not None:
            self.error_msg = error_msg
        if error is not None:
            self.error = error

    @property
    def address(self):
        """Gets the address of this License.  # noqa: E501

        Node adddress  # noqa: E501

        :return: The address of this License.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this License.

        Node adddress  # noqa: E501

        :param address: The address of this License.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def type_name(self):
        """Gets the type_name of this License.  # noqa: E501

        License type name  # noqa: E501

        :return: The type_name of this License.  # noqa: E501
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this License.

        License type name  # noqa: E501

        :param type_name: The type_name of this License.  # noqa: E501
        :type: str
        """

        self._type_name = type_name

    @property
    def status(self):
        """Gets the status of this License.  # noqa: E501


        :return: The status of this License.  # noqa: E501
        :rtype: LicenseStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this License.


        :param status: The status of this License.  # noqa: E501
        :type: LicenseStatus
        """

        self._status = status

    @property
    def cloud_key(self):
        """Gets the cloud_key of this License.  # noqa: E501

        Cloud key  # noqa: E501

        :return: The cloud_key of this License.  # noqa: E501
        :rtype: str
        """
        return self._cloud_key

    @cloud_key.setter
    def cloud_key(self, cloud_key):
        """Sets the cloud_key of this License.

        Cloud key  # noqa: E501

        :param cloud_key: The cloud_key of this License.  # noqa: E501
        :type: str
        """

        self._cloud_key = cloud_key

    @property
    def started_at(self):
        """Gets the started_at of this License.  # noqa: E501

        Cloud session start timestamp  # noqa: E501

        :return: The started_at of this License.  # noqa: E501
        :rtype: int
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this License.

        Cloud session start timestamp  # noqa: E501

        :param started_at: The started_at of this License.  # noqa: E501
        :type: int
        """

        self._started_at = started_at

    @property
    def organization(self):
        """Gets the organization of this License.  # noqa: E501

        Owning Organization  # noqa: E501

        :return: The organization of this License.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this License.

        Owning Organization  # noqa: E501

        :param organization: The organization of this License.  # noqa: E501
        :type: str
        """

        self._organization = organization

    @property
    def user_name(self):
        """Gets the user_name of this License.  # noqa: E501

        Assigned username  # noqa: E501

        :return: The user_name of this License.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this License.

        Assigned username  # noqa: E501

        :param user_name: The user_name of this License.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def max_version(self):
        """Gets the max_version of this License.  # noqa: E501

        Maximum version  # noqa: E501

        :return: The max_version of this License.  # noqa: E501
        :rtype: int
        """
        return self._max_version

    @max_version.setter
    def max_version(self, max_version):
        """Sets the max_version of this License.

        Maximum version  # noqa: E501

        :param max_version: The max_version of this License.  # noqa: E501
        :type: int
        """

        self._max_version = max_version

    @property
    def expiration(self):
        """Gets the expiration of this License.  # noqa: E501

        Expiration date (formatted as YYYYMMDD)  # noqa: E501

        :return: The expiration of this License.  # noqa: E501
        :rtype: int
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this License.

        Expiration date (formatted as YYYYMMDD)  # noqa: E501

        :param expiration: The expiration of this License.  # noqa: E501
        :type: int
        """

        self._expiration = expiration

    @property
    def expires_at(self):
        """Gets the expires_at of this License.  # noqa: E501

        Expiration timestamp  # noqa: E501

        :return: The expires_at of this License.  # noqa: E501
        :rtype: int
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this License.

        Expiration timestamp  # noqa: E501

        :param expires_at: The expires_at of this License.  # noqa: E501
        :type: int
        """

        self._expires_at = expires_at

    @property
    def cs_enabled(self):
        """Gets the cs_enabled of this License.  # noqa: E501

        Indicate of Compute Server is enabled  # noqa: E501

        :return: The cs_enabled of this License.  # noqa: E501
        :rtype: bool
        """
        return self._cs_enabled

    @cs_enabled.setter
    def cs_enabled(self, cs_enabled):
        """Sets the cs_enabled of this License.

        Indicate of Compute Server is enabled  # noqa: E501

        :param cs_enabled: The cs_enabled of this License.  # noqa: E501
        :type: bool
        """

        self._cs_enabled = cs_enabled

    @property
    def distributed_limit(self):
        """Gets the distributed_limit of this License.  # noqa: E501

        Distributed limit  # noqa: E501

        :return: The distributed_limit of this License.  # noqa: E501
        :rtype: int
        """
        return self._distributed_limit

    @distributed_limit.setter
    def distributed_limit(self, distributed_limit):
        """Sets the distributed_limit of this License.

        Distributed limit  # noqa: E501

        :param distributed_limit: The distributed_limit of this License.  # noqa: E501
        :type: int
        """

        self._distributed_limit = distributed_limit

    @property
    def app_name(self):
        """Gets the app_name of this License.  # noqa: E501

        Assigned application name  # noqa: E501

        :return: The app_name of this License.  # noqa: E501
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this License.

        Assigned application name  # noqa: E501

        :param app_name: The app_name of this License.  # noqa: E501
        :type: str
        """

        self._app_name = app_name

    @property
    def error_msg(self):
        """Gets the error_msg of this License.  # noqa: E501

        Error message  # noqa: E501

        :return: The error_msg of this License.  # noqa: E501
        :rtype: str
        """
        return self._error_msg

    @error_msg.setter
    def error_msg(self, error_msg):
        """Sets the error_msg of this License.

        Error message  # noqa: E501

        :param error_msg: The error_msg of this License.  # noqa: E501
        :type: str
        """

        self._error_msg = error_msg

    @property
    def error(self):
        """Gets the error of this License.  # noqa: E501

        Error code  # noqa: E501

        :return: The error of this License.  # noqa: E501
        :rtype: int
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this License.

        Error code  # noqa: E501

        :param error: The error of this License.  # noqa: E501
        :type: int
        """

        self._error = error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(License, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, License):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, License):
            return True

        return self.to_dict() != other.to_dict()
