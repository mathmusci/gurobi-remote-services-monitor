# coding: utf-8

"""
    Gurobi Remote Services API

    The Gurobi Remote Services is used to control a compute  node  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from grb_rs_monitor.api_client.swagger_client.api_client import ApiClient


class ClusterApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def cluster_jobs_get(self, x_gurobi_cspassword, **kwargs):  # noqa: E501
        """Lists the jobs  # noqa: E501

        This endpoint returns the list of all jobs started, queued or recently processed in the cluster. You can filter the jobs by using the query parameters queued, running or completed. In the returned list, the same job can appear multiple times as it may have been queued in multiple nodes of the cluster unless the aggregate query parameter is true .   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cluster_jobs_get(x_gurobi_cspassword, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_gurobi_cspassword: Password (required)
        :param bool queued: Select queued jobs
        :param bool aggregate: Aggregate queued jobs
        :param bool running: Select running jobs
        :param bool recent: Select recently processed jobs
        :return: list[Job]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cluster_jobs_get_with_http_info(x_gurobi_cspassword, **kwargs)  # noqa: E501
        else:
            (data) = self.cluster_jobs_get_with_http_info(x_gurobi_cspassword, **kwargs)  # noqa: E501
            return data

    def cluster_jobs_get_with_http_info(self, x_gurobi_cspassword, **kwargs):  # noqa: E501
        """Lists the jobs  # noqa: E501

        This endpoint returns the list of all jobs started, queued or recently processed in the cluster. You can filter the jobs by using the query parameters queued, running or completed. In the returned list, the same job can appear multiple times as it may have been queued in multiple nodes of the cluster unless the aggregate query parameter is true .   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cluster_jobs_get_with_http_info(x_gurobi_cspassword, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_gurobi_cspassword: Password (required)
        :param bool queued: Select queued jobs
        :param bool aggregate: Aggregate queued jobs
        :param bool running: Select running jobs
        :param bool recent: Select recently processed jobs
        :return: list[Job]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_gurobi_cspassword', 'queued', 'aggregate', 'running', 'recent']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cluster_jobs_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_gurobi_cspassword' is set
        if self.api_client.client_side_validation and ('x_gurobi_cspassword' not in params or
                                                       params['x_gurobi_cspassword'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_gurobi_cspassword` when calling `cluster_jobs_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'queued' in params:
            query_params.append(('queued', params['queued']))  # noqa: E501
        if 'aggregate' in params:
            query_params.append(('aggregate', params['aggregate']))  # noqa: E501
        if 'running' in params:
            query_params.append(('running', params['running']))  # noqa: E501
        if 'recent' in params:
            query_params.append(('recent', params['recent']))  # noqa: E501

        header_params = {}
        if 'x_gurobi_cspassword' in params:
            header_params['X-GUROBI-CSPASSWORD'] = params['x_gurobi_cspassword']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cluster/jobs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Job]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cluster_jobs_id_get(self, x_gurobi_cspassword, id, **kwargs):  # noqa: E501
        """Returns a job description  # noqa: E501

        This endpoint returns the state of a specific jobs. It returns a list because the job may have been queued in multiple nodes of the cluster, unless the aggregate query parameter is true   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cluster_jobs_id_get(x_gurobi_cspassword, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_gurobi_cspassword: Password (required)
        :param str id: Job ID (required)
        :param bool aggregate: Aggregate queued jobs
        :return: list[Job]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cluster_jobs_id_get_with_http_info(x_gurobi_cspassword, id, **kwargs)  # noqa: E501
        else:
            (data) = self.cluster_jobs_id_get_with_http_info(x_gurobi_cspassword, id, **kwargs)  # noqa: E501
            return data

    def cluster_jobs_id_get_with_http_info(self, x_gurobi_cspassword, id, **kwargs):  # noqa: E501
        """Returns a job description  # noqa: E501

        This endpoint returns the state of a specific jobs. It returns a list because the job may have been queued in multiple nodes of the cluster, unless the aggregate query parameter is true   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cluster_jobs_id_get_with_http_info(x_gurobi_cspassword, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_gurobi_cspassword: Password (required)
        :param str id: Job ID (required)
        :param bool aggregate: Aggregate queued jobs
        :return: list[Job]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_gurobi_cspassword', 'id', 'aggregate']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cluster_jobs_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_gurobi_cspassword' is set
        if self.api_client.client_side_validation and ('x_gurobi_cspassword' not in params or
                                                       params['x_gurobi_cspassword'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_gurobi_cspassword` when calling `cluster_jobs_id_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `cluster_jobs_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'aggregate' in params:
            query_params.append(('aggregate', params['aggregate']))  # noqa: E501

        header_params = {}
        if 'x_gurobi_cspassword' in params:
            header_params['X-GUROBI-CSPASSWORD'] = params['x_gurobi_cspassword']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cluster/jobs/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Job]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cluster_jobs_id_processing_delete(self, x_gurobi_cspassword, id, **kwargs):  # noqa: E501
        """ADMIN - Aborts a job  # noqa: E501

        This endpoint kills a running job immediately or remove it from the queue from all cluster members.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cluster_jobs_id_processing_delete(x_gurobi_cspassword, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_gurobi_cspassword: Admin Password (required)
        :param str id: Job ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cluster_jobs_id_processing_delete_with_http_info(x_gurobi_cspassword, id, **kwargs)  # noqa: E501
        else:
            (data) = self.cluster_jobs_id_processing_delete_with_http_info(x_gurobi_cspassword, id, **kwargs)  # noqa: E501
            return data

    def cluster_jobs_id_processing_delete_with_http_info(self, x_gurobi_cspassword, id, **kwargs):  # noqa: E501
        """ADMIN - Aborts a job  # noqa: E501

        This endpoint kills a running job immediately or remove it from the queue from all cluster members.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cluster_jobs_id_processing_delete_with_http_info(x_gurobi_cspassword, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_gurobi_cspassword: Admin Password (required)
        :param str id: Job ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_gurobi_cspassword', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cluster_jobs_id_processing_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_gurobi_cspassword' is set
        if self.api_client.client_side_validation and ('x_gurobi_cspassword' not in params or
                                                       params['x_gurobi_cspassword'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_gurobi_cspassword` when calling `cluster_jobs_id_processing_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `cluster_jobs_id_processing_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_gurobi_cspassword' in params:
            header_params['X-GUROBI-CSPASSWORD'] = params['x_gurobi_cspassword']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cluster/jobs/{id}/processing', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cluster_licenses_get(self, x_gurobi_cspassword, **kwargs):  # noqa: E501
        """ADMIN - Lists the licenses  # noqa: E501

        Returns the license information from each node of the cluster. This call is useful to verify and monitor licenses across the cluster nodes. For example, the expiration date of licenses can easily be monitored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cluster_licenses_get(x_gurobi_cspassword, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_gurobi_cspassword: Admin Password (required)
        :return: list[License]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cluster_licenses_get_with_http_info(x_gurobi_cspassword, **kwargs)  # noqa: E501
        else:
            (data) = self.cluster_licenses_get_with_http_info(x_gurobi_cspassword, **kwargs)  # noqa: E501
            return data

    def cluster_licenses_get_with_http_info(self, x_gurobi_cspassword, **kwargs):  # noqa: E501
        """ADMIN - Lists the licenses  # noqa: E501

        Returns the license information from each node of the cluster. This call is useful to verify and monitor licenses across the cluster nodes. For example, the expiration date of licenses can easily be monitored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cluster_licenses_get_with_http_info(x_gurobi_cspassword, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_gurobi_cspassword: Admin Password (required)
        :return: list[License]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_gurobi_cspassword']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cluster_licenses_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_gurobi_cspassword' is set
        if self.api_client.client_side_validation and ('x_gurobi_cspassword' not in params or
                                                       params['x_gurobi_cspassword'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_gurobi_cspassword` when calling `cluster_licenses_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_gurobi_cspassword' in params:
            header_params['X-GUROBI-CSPASSWORD'] = params['x_gurobi_cspassword']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cluster/licenses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[License]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cluster_nodes_get(self, x_gurobi_cspassword, **kwargs):  # noqa: E501
        """Lists the nodes  # noqa: E501

        Returns the list of nodes of the cluster with the latest status and metrics.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cluster_nodes_get(x_gurobi_cspassword, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_gurobi_cspassword: Password (required)
        :return: list[Node]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cluster_nodes_get_with_http_info(x_gurobi_cspassword, **kwargs)  # noqa: E501
        else:
            (data) = self.cluster_nodes_get_with_http_info(x_gurobi_cspassword, **kwargs)  # noqa: E501
            return data

    def cluster_nodes_get_with_http_info(self, x_gurobi_cspassword, **kwargs):  # noqa: E501
        """Lists the nodes  # noqa: E501

        Returns the list of nodes of the cluster with the latest status and metrics.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cluster_nodes_get_with_http_info(x_gurobi_cspassword, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_gurobi_cspassword: Password (required)
        :return: list[Node]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_gurobi_cspassword']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cluster_nodes_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_gurobi_cspassword' is set
        if self.api_client.client_side_validation and ('x_gurobi_cspassword' not in params or
                                                       params['x_gurobi_cspassword'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_gurobi_cspassword` when calling `cluster_nodes_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_gurobi_cspassword' in params:
            header_params['X-GUROBI-CSPASSWORD'] = params['x_gurobi_cspassword']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cluster/nodes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Node]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
